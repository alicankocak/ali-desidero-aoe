generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String?
  name         String?
  avatarUrl    String?
  isActive     Boolean  @default(true)
  roles        UserRole[]
  player       Player?
  news         News[]
  comments     MatchComment[]   // <-- BUNU UNUTMA
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Role {
  id    String   @id @default(cuid())
  name  String   @unique   // ADMIN, MODERATOR, EDITOR, PLAYER
  users UserRole[]
}

model UserRole {
  userId String
  roleId String
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

enum League {
  LIG1
  LIG2
}

enum VideoType {
  YOUTUBE
  TWITCH
}

enum NewsCategory {
  GENERAL
  MATCH
  ANNOUNCEMENT
  INTERVIEW
  STRATEGY
}

model News {
  id        String        @id @default(cuid())
  title     String
  slug      String        @unique
  excerpt   String?
  content   String
  category  NewsCategory
  year      Int
  tags      String[]
  authorId  String?
  author    User?         @relation(fields: [authorId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([category, year])
  @@index([createdAt])
}

model Player {
  id             String   @id @default(cuid())
  userId         String?  @unique
  displayName    String
  currentLeague  League?
  activeInLeague Boolean  @default(false)
  favoriteCiv    String?
  favoriteUnit   String?
  preferredRole  String?
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user        User?       @relation(fields: [userId], references: [id])
  homeMatches Match[]     @relation("HomeMatches")
  awayMatches Match[]     @relation("AwayMatches")
  videos      VideoLink[]
}

model Match {
  id          String         @id @default(cuid())
  league      League
  season      String
  round       Int?
  playedAt    DateTime?
  homeId      String
  awayId      String
  home        Player         @relation("HomeMatches", fields: [homeId], references: [id])
  away        Player         @relation("AwayMatches", fields: [awayId], references: [id])
  homeWins    Int            @default(0)     // 0..2
  awayWins    Int            @default(0)     // 0..2
  homeCiv     String?
  awayCiv     String?
  durationSec Int?
  vodUrl      String?
  comments    MatchComment[]                 // ðŸ‘ˆ maÃ§ yorumlarÄ±
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([season, league, homeId, awayId])
  @@index([league, season])
  seasonRelId String?
  seasonRel   Season?   @relation("SeasonMatches", fields: [seasonRelId], references: [id])
}

model MatchComment {
  id         String   @id @default(cuid())
  matchId    String
  match      Match    @relation(fields: [matchId], references: [id])
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  content    String
  createdAt  DateTime @default(now())
}

model VideoLink {
  id        String   @id @default(cuid())
  playerId  String
  player    Player   @relation(fields: [playerId], references: [id])
  type      VideoType
  url       String
  title     String?
  createdAt DateTime @default(now())

  @@index([playerId, createdAt])
}

/// === ADMIN PANELS ===
model LeagueTable {
  id        String    @id @default(cuid())
  name      String    @unique
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  seasons   Season[]
}

model Season {
  id        String    @id @default(cuid())
  leagueId  String
  league    LeagueTable @relation(fields: [leagueId], references: [id])
  label     String      // "2025-1" gibi
  year      Int
  index     Int         // 1,2,3...
  startAt   DateTime
  endAt     DateTime
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  memberships SeasonMembership[]
  fixtures     Fixture[]
  matches      Match[] @relation("SeasonMatches")

  @@unique([leagueId, label])
  @@index([isActive])
}

model SeasonMembership {
  id        String   @id @default(cuid())
  seasonId  String
  playerId  String
  season    Season   @relation(fields: [seasonId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])
  createdAt DateTime @default(now())

  @@unique([seasonId, playerId])
  @@index([playerId])
}

model Fixture {
  id        String    @id @default(cuid())
  name      String
  map       String
  seasonId  String
  season    Season    @relation(fields: [seasonId], references: [id])
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum AuditEntity {
  LEAGUE
  FIXTURE
}

model AuditLog {
  id        String      @id @default(cuid())
  entity    AuditEntity
  entityId  String
  userId    String?
  action    String
  detail    Json?
  createdAt DateTime    @default(now())
}

/// Mevcut Match modeline sezona relation ekleyelim (liste/oluÅŸturma iÃ§in)
/// NOT: EÄŸer zaten ekstra kolonlar eklediysen atla.

// =================== Admin Panel Modelleri ===================

enum AuditEntity {
  LEAGUE
  FIXTURE
}

model LeagueTable {
  id        String    @id @default(cuid())
  name      String    @unique
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  seasons   Season[]
}

model Season {
  id        String      @id @default(cuid())
  leagueId  String
  league    LeagueTable @relation(fields: [leagueId], references: [id])

  /// "2025-1" gibi
  label     String
  year      Int
  index     Int

  startAt   DateTime
  endAt     DateTime
  isActive  Boolean     @default(true)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  memberships SeasonMembership[]
  fixtures     Fixture[]
  matches      Match[] @relation("SeasonMatches")

  @@unique([leagueId, label])
  @@index([isActive])
}

model SeasonMembership {
  id        String   @id @default(cuid())
  seasonId  String
  playerId  String

  season    Season   @relation(fields: [seasonId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])

  createdAt DateTime @default(now())

  @@unique([seasonId, playerId])
  @@index([playerId])
}

model Fixture {
  id        String    @id @default(cuid())
  name      String
  map       String
  seasonId  String
  season    Season    @relation(fields: [seasonId], references: [id])
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model AuditLog {
  id        String      @id @default(cuid())
  entity    AuditEntity
  entityId  String
  userId    String?
  action    String
  detail    Json?
  createdAt DateTime    @default(now())
}

// ================= End Admin Panel Modelleri =================
